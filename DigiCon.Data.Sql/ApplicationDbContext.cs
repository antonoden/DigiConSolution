using DigiCon.Domain.Entities;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data.Entity.Infrastructure.Annotations;
using System.Data.Entity.ModelConfiguration.Conventions;

namespace DigiCon.Data.Sql
{
    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext() : base("ApplicationDatabase")
        {
           
        }
        
        public DbSet<Playlist> Playlists { get; set; }
        public DbSet<Slide> Slides { get; set; }
        public DbSet<Template> Templates { get; set; }
        public DbSet<Viewclient> Viewclients { get; set; }
        public DbSet<ViewclientPlaylist> Viewclient_Playlist { get; set; }
        public DbSet<PlaylistSlide> Playlist_Slide { get; set; }
        public DbSet<Animation> Animations { get; set; }


        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();


            //
            // Viewclient
            //
            modelBuilder.Entity<Viewclient>()   // autogenerated value (viewclientID)
                            .Property(a => a.ViewclientID)
                            .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

            modelBuilder.Entity<Viewclient>()   // primary key (viewclientID)
                            .HasKey(t => t.ViewclientID);

            //
            // ViewclientPlaylist
            //
            modelBuilder.Entity<ViewclientPlaylist>()   // one-to-many (viewclient-to-viewclientplaylist)
                            .HasRequired(vp => vp.Viewclient)
                            .WithMany(v => v.ViewclientPlaylists)
                            .HasForeignKey(vp => vp.ViewclientID);

            modelBuilder.Entity<ViewclientPlaylist>()   // one-to-many (playlist-to-viewclientplaylist)
                            .HasRequired(vp => vp.Playlist)
                            .WithMany(v => v.ViewClientPlaylists)
                            .HasForeignKey(vp => vp.PlaylistID);

            modelBuilder.Entity<ViewclientPlaylist>()   // primary key (viewclientID, playlistID)
                            .HasKey(vp => new { vp.ViewclientID, vp.PlaylistID });

            //
            // Playlist
            //
            modelBuilder.Entity<Playlist>()   // autogenerated value (playlistID)
                            .Property(a => a.PlaylistID)
                            .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

            modelBuilder.Entity<Playlist>()   // primary key (playlistID)
                            .HasKey(t => t.PlaylistID);
            
            //
            // PlaylistSlide
            //
            modelBuilder.Entity<PlaylistSlide>()    // one-to-many (playlist-to-playlistslide)
                            .HasRequired(ps => ps.Playlist)
                            .WithMany(p => p.PlaylistSlides)
                            .HasForeignKey(ps => ps.PlaylistID);

            modelBuilder.Entity<PlaylistSlide>()    // one-to-many (slide-to-playlistslide)
                            .HasRequired(ps => ps.Slide)
                            .WithMany(s => s.SlidePlaylists)
                            .HasForeignKey(ps => ps.SlideID);

            modelBuilder.Entity<PlaylistSlide>()    // primary key (playlistID, slideID)
                            .HasKey(ps => new { ps.PlaylistID, ps.SlideID });

            modelBuilder.Entity<PlaylistSlide>()    // one-to-many (animation-to-playlistslides)
                            .HasRequired(ps => ps.Animation)
                            .WithMany(a => a.PlaylistSlides)
                            .HasForeignKey(ps => ps.AnimationID);

            //
            // Slide
            //
            modelBuilder.Entity<Slide>()    // autogenerated value (slideID)
                            .Property(a => a.SlideID)
                            .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

            modelBuilder.Entity<Slide>()   // primary key (slideID)
                            .HasKey(t => t.SlideID);

            modelBuilder.Entity<Slide>()    // one-to-many (template-to-slide)
                            .HasOptional(s => s.Template)
                            .WithMany(t => t.Slides)
                            .HasForeignKey(s => s.TemplateID);

            //
            // Template
            //
            modelBuilder.Entity<Template>()   // autogenerated value (templateID)
                            .Property(a => a.TemplateID)
                            .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

            modelBuilder.Entity<Template>()   // primary key (templateID)
                            .HasKey(t => t.TemplateID);
            
            //
            // Animation 
            //
            modelBuilder.Entity<Animation>()   // autogenerated value (animationID)
                            .Property(a => a.AnimationID)
                            .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

            modelBuilder.Entity<Animation>()   // primary key (animationID)
                            .HasKey(t => t.AnimationID);
        }
        
    }
}
